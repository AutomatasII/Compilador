
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 21 15:56:43 CDT 2015
//----------------------------------------------------

package compilador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 21 15:56:43 CDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\002" +
    "\000\002\006\004\000\002\006\003\000\002\007\004\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\007\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\011\000\002\013\004\000\002\013\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\022\004\000\002\023\003\000\002\023\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\003\000\002\030\004\000\002\031\011" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\032\006\000\002\035\015\000\002\036\005" +
    "\000\002\036\004\000\002\037\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\030\002\ufffc\010\017\024\032\025\013\027" +
    "\005\031\025\037\007\040\006\045\021\046\034\047\020" +
    "\001\002\000\004\004\176\001\002\000\006\030\170\031" +
    "\uffeb\001\002\000\004\031\uffea\001\002\000\004\022\162" +
    "\001\002\000\032\002\ufff5\010\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\027\ufff5\031\ufff5\037\ufff5\040\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\001\002\000\004\002\ufffe\001\002\000\032\002" +
    "\ufff8\010\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\031\ufff8" +
    "\037\ufff8\040\ufff8\045\ufff8\046\ufff8\047\ufff8\001\002\000" +
    "\004\005\154\001\002\000\004\031\152\001\002\000\004" +
    "\002\uffff\001\002\000\032\002\ufffa\010\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\027\ufffa\031\ufffa\037\ufffa\040\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\001\002\000\004\055\141\001\002\000" +
    "\004\031\uffe7\001\002\000\004\031\uffe9\001\002\000\032" +
    "\002\uffcd\010\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\031" +
    "\uffcd\037\uffcd\040\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002" +
    "\000\032\002\uffcb\010\uffcb\023\uffcb\024\uffcb\025\uffcb\027" +
    "\uffcb\031\uffcb\037\uffcb\040\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\001\002\000\032\002\ufff7\010\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\027\ufff7\031\ufff7\037\ufff7\040\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\001\002\000\004\007\134\001\002\000\004\002" +
    "\133\001\002\000\032\002\uffcc\010\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\027\uffcc\031\uffcc\037\uffcc\040\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\001\002\000\032\002\ufff6\010\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\027\ufff6\031\ufff6\037\ufff6\040\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\001\002\000\032\002\ufffd\010\017" +
    "\023\ufffd\024\032\025\013\027\005\031\025\037\007\040" +
    "\006\045\021\046\034\047\020\001\002\000\004\005\043" +
    "\001\002\000\034\002\uffca\010\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\036\027\uffca\031\uffca\037\uffca\040\uffca\045\uffca" +
    "\046\uffca\047\uffca\001\002\000\004\031\uffe8\001\002\000" +
    "\004\002\000\001\002\000\004\022\040\001\002\000\032" +
    "\002\uffc9\010\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\031" +
    "\uffc9\037\uffc9\040\uffc9\045\uffc9\046\uffc9\047\uffc9\001\002" +
    "\000\030\010\017\023\ufffc\024\032\025\013\027\005\031" +
    "\025\037\007\040\006\045\021\046\034\047\020\001\002" +
    "\000\004\023\042\001\002\000\032\002\uffbd\010\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\031\uffbd\037\uffbd\040\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\001\002\000\016\027\047\031" +
    "\044\040\006\045\021\046\034\047\020\001\002\000\004" +
    "\007\052\001\002\000\004\004\102\001\002\000\004\031" +
    "\050\001\002\000\004\031\uffeb\001\002\000\004\007\052" +
    "\001\002\000\004\004\uffbb\001\002\000\014\031\063\032" +
    "\056\033\053\034\060\035\054\001\002\000\062\002\uffe2" +
    "\004\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\031\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\001\002\000\062\002\uffe1" +
    "\004\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\020" +
    "\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\031\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\001\002\000\004\004\uffe6" +
    "\001\002\000\062\002\uffe3\004\uffe3\006\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\027\uffe3\031\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\001\002\000\014\004\uffe5\041\071\042\067\043\072\044" +
    "\066\001\002\000\062\002\uffe0\004\uffe0\006\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\020\uffe0\021\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\031\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\001\002\000\034\002\uffdf\004\uffdf\010\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\027\uffdf\031\uffdf\037\uffdf\040\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\001\002\000\034\002\uffdd\004\uffdd" +
    "\010\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\031\uffdd\037" +
    "\uffdd\040\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\020" +
    "\004\uffe4\015\073\017\065\041\071\042\067\043\072\044" +
    "\066\001\002\000\034\002\uffde\004\uffde\010\uffde\023\uffde" +
    "\024\uffde\025\uffde\027\uffde\031\uffde\037\uffde\040\uffde\045" +
    "\uffde\046\uffde\047\uffde\001\002\000\036\002\uffd3\004\uffd3" +
    "\006\uffd3\010\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\031" +
    "\uffd3\037\uffd3\040\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002" +
    "\000\014\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\001" +
    "\002\000\014\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\001\002\000\036\002\uffd4\004\uffd4\006\uffd4\010\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\027\uffd4\031\uffd4\037\uffd4\040\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\001\002\000\014\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\001\002\000\014\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\001\002\000\036\002" +
    "\uffd2\004\uffd2\006\uffd2\010\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\027\uffd2\031\uffd2\037\uffd2\040\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\001\002\000\014\031\076\032\056\033\053\034\060" +
    "\035\054\001\002\000\034\002\uffda\004\uffda\010\uffda\023" +
    "\uffda\024\uffda\025\uffda\027\uffda\031\uffda\037\uffda\040\uffda" +
    "\045\uffda\046\uffda\047\uffda\001\002\000\034\002\uffd9\004" +
    "\uffd9\010\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\031\uffd9" +
    "\037\uffd9\040\uffd9\045\uffd9\046\uffd9\047\uffd9\001\002\000" +
    "\014\031\100\032\056\033\053\034\060\035\054\001\002" +
    "\000\034\002\uffdb\004\uffdb\010\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\027\uffdb\031\uffdb\037\uffdb\040\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\001\002\000\034\002\uffdc\004\uffdc\010\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\027\uffdc\031\uffdc\037\uffdc\040\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\001\002\000\014\031\104\032" +
    "\056\033\053\034\060\035\054\001\002\000\016\011\120" +
    "\012\115\013\116\020\122\021\121\036\117\001\002\000" +
    "\016\011\120\012\115\013\116\020\122\021\121\036\117" +
    "\001\002\000\004\004\106\001\002\000\004\031\107\001" +
    "\002\000\006\015\073\017\065\001\002\000\004\006\111" +
    "\001\002\000\004\022\112\001\002\000\030\010\017\023" +
    "\ufffc\024\032\025\013\027\005\031\025\037\007\040\006" +
    "\045\021\046\034\047\020\001\002\000\004\023\114\001" +
    "\002\000\032\002\uffbc\010\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\031\uffbc\037\uffbc\040\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\001\002\000\014\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\001\002\000\014\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\001\002\000\014\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\001\002\000\014\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\001\002\000\014\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\001\002\000\014\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\001\002\000\014\031\125" +
    "\032\056\033\053\034\060\035\054\001\002\000\010\004" +
    "\uffc5\006\uffc5\023\uffc5\001\002\000\010\004\uffc4\006\uffc4" +
    "\023\uffc4\001\002\000\014\031\130\032\056\033\053\034" +
    "\060\035\054\001\002\000\010\004\uffc7\006\uffc7\023\uffc7" +
    "\001\002\000\010\004\uffc6\006\uffc6\023\uffc6\001\002\000" +
    "\004\004\uffba\001\002\000\032\002\ufffb\010\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\027\ufffb\031\ufffb\037\ufffb\040\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\001\002\000\004\002\001\001\002" +
    "\000\014\031\140\032\056\033\053\034\060\035\054\001" +
    "\002\000\032\002\uffcf\010\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\027\uffcf\031\uffcf\037\uffcf\040\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\001\002\000\042\002\uffd0\010\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\027\uffd0\031\uffd0\037\uffd0\040\uffd0\041\071\042" +
    "\067\043\072\044\066\045\uffd0\046\uffd0\047\uffd0\001\002" +
    "\000\032\002\uffd1\010\uffd1\023\uffd1\024\uffd1\025\uffd1\027" +
    "\uffd1\031\uffd1\037\uffd1\040\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\001\002\000\046\002\uffce\010\uffce\015\073\017\065\023" +
    "\uffce\024\uffce\025\uffce\027\uffce\031\uffce\037\uffce\040\uffce" +
    "\041\071\042\067\043\072\044\066\045\uffce\046\uffce\047" +
    "\uffce\001\002\000\004\021\142\001\002\000\014\053\144" +
    "\054\146\056\143\057\145\060\147\001\002\000\004\020" +
    "\ufff1\001\002\000\004\020\ufff3\001\002\000\004\020\ufff0" +
    "\001\002\000\004\020\ufff2\001\002\000\004\020\uffef\001" +
    "\002\000\004\020\151\001\002\000\032\002\ufff4\010\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\027\ufff4\031\ufff4\037\ufff4\040" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\001\002\000\006\004\uffed" +
    "\007\052\001\002\000\004\004\uffec\001\002\000\014\031" +
    "\104\032\056\033\053\034\060\035\054\001\002\000\004" +
    "\006\156\001\002\000\004\022\157\001\002\000\030\010" +
    "\017\023\ufffc\024\032\025\013\027\005\031\025\037\007" +
    "\040\006\045\021\046\034\047\020\001\002\000\004\023" +
    "\161\001\002\000\034\002\uffc8\010\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\031\uffc8\037\uffc8\040\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\001\002\000\014\031\104\032\056" +
    "\033\053\034\060\035\054\001\002\000\004\023\164\001" +
    "\002\000\004\022\165\001\002\000\030\010\017\023\ufffc" +
    "\024\032\025\013\027\005\031\025\037\007\040\006\045" +
    "\021\046\034\047\020\001\002\000\004\023\167\001\002" +
    "\000\032\002\uffb9\010\uffb9\023\uffb9\024\uffb9\025\uffb9\027" +
    "\uffb9\031\uffb9\037\uffb9\040\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\001\002\000\004\005\171\001\002\000\004\006\172\001" +
    "\002\000\004\022\173\001\002\000\030\010\017\023\ufffc" +
    "\024\032\025\013\027\005\031\025\037\007\040\006\045" +
    "\021\046\034\047\020\001\002\000\004\023\175\001\002" +
    "\000\032\002\uffee\010\uffee\023\uffee\024\uffee\025\uffee\027" +
    "\uffee\031\uffee\037\uffee\040\uffee\045\uffee\046\uffee\047\uffee" +
    "\001\002\000\032\002\ufff9\010\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\027\ufff9\031\ufff9\037\ufff9\040\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\042\002\025\003\034\004\014\005\010\006" +
    "\030\007\015\010\027\012\007\013\003\014\013\025\011" +
    "\027\023\030\021\031\032\035\026\037\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\131\010\027\012\007" +
    "\013\003\014\013\025\011\027\023\030\021\031\032\035" +
    "\026\037\022\001\001\000\002\001\001\000\004\032\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\040\006\030\007\015" +
    "\010\027\012\007\013\003\014\013\025\011\027\023\030" +
    "\021\031\032\035\026\037\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\045\036\044\001\001\000" +
    "\004\015\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\050\001\001\000\002\001" +
    "\001\000\014\016\056\017\054\020\060\021\061\022\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\067\024\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\102\033\104\001\001\000\004\034\125\001" +
    "\001\000\004\034\122\001\001\000\002\001\001\000\004" +
    "\022\107\001\001\000\004\023\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\112\006\030\007\015" +
    "\010\027\012\007\013\003\014\013\025\011\027\023\030" +
    "\021\031\032\035\026\037\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\135\017\134\020\060\021\061" +
    "\022\063\026\136\001\001\000\002\001\001\000\004\024" +
    "\076\001\001\000\002\001\001\000\006\023\067\024\073" +
    "\001\001\000\002\001\001\000\004\011\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\152\001\001\000\002\001\001\000\006" +
    "\016\102\033\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\157\006\030\007\015\010\027\012\007" +
    "\013\003\014\013\025\011\027\023\030\021\031\032\035" +
    "\026\037\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\102\033\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\165\006\030\007\015\010\027" +
    "\012\007\013\003\014\013\025\011\027\023\030\021\031" +
    "\032\035\026\037\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\173\006\030\007\015\010\027\012\007" +
    "\013\003\014\013\025\011\027\023\030\021\031\032\035" +
    "\026\037\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String error_sintactico = "";
    String error_unrecovered = "";
    String error_semantico = "";
    void print(String msj){
        System.out.println(msj);
    }
    public void syntax_error(Symbol cur_token){
        error_sintactico += "Error sintactico "+ cur_token.value + "\n";
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
        error_unrecovered += "Imposible recuperarse del error\n";
    }
    public void semantic(Symbol cur_token,String n) {
        error_semantico += "Error semantico en el token: " + cur_token.value + " " + n + "\n"; 
    }
    public void semantic(String msg, Object obj) {
        error_semantico += "Error semantico: " + msg + " : " + obj + "\n";
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ciclo_while ::= WHILE LLAVEIZQ condicion LLAVEDER LLAVEIZQ codigo LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicio_for ::= IDENTIFICADOR asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_for",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicio_for ::= tipo_variable IDENTIFICADOR asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_for",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ciclo_for ::= FOR OPEN inicio_for PUNTOCOMA condicion PUNTOCOMA inc_dec_variable CLOSE LLAVEIZQ codigo LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // no ::= ELSE LLAVEIZQ codigo LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicional ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicional ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicional ::= EQUALS_EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= IDENTIFICADOR condicional IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= IDENTIFICADOR condicional valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion ::= valor condicional IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion ::= valor condicional valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // si ::= IF OPEN condicion CLOSE LLAVEIZQ codigo LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ciclo_if ::= si no 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ciclo_if ::= si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ciclos ::= ciclo_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ciclos ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ciclos ::= ciclo_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // conjunto_asignacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto_asignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conjunto_asignacion ::= operacion_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto_asignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conjunto_asignacion ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto_asignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cambiar_valor ::= IDENTIFICADOR EQUALS conjunto_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cambiar_valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inc_dec ::= MENOSUNO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inc_dec ::= MASUNO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inc_dec_variable ::= IDENTIFICADOR inc_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_variable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_operacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_operacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_operacion ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_operacion ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion ::= IDENTIFICADOR tipo_operacion IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion ::= IDENTIFICADOR tipo_operacion valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion ::= valor tipo_operacion IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion ::= valor tipo_operacion valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aritmetica ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion_asignacion ::= inc_dec_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion_asignacion ::= aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignar ::= EQUALS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignar ::= EQUALS valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar ::= EQUALS operacion_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_variable ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_variable ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_variable ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_variable ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_variable ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // iniciar_variables ::= tipo_variable IDENTIFICADOR asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniciar_variables",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // iniciar_variables ::= tipo_variable IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniciar_variables",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion_main ::= INT MAIN OPEN CLOSE LLAVEIZQ codigo LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // libreria ::= IOSTREAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("libreria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // libreria ::= CSTDLIB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("libreria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // libreria ::= CSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("libreria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // libreria ::= CSTDIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("libreria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // libreria ::= CMATH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("libreria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_libreria ::= GATO INCLUDE MENOR libreria MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_libreria",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // linea ::= funcion_main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // linea ::= declaracion_libreria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // linea ::= ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // linea ::= cambiar_valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // linea ::= iniciar_variables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lineas ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lineas ::= lineas linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= lineas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

