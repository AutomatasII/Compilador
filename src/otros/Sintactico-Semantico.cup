package compilador;


import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;


action code{:
    String error_sintactico = "";
    String error_unrecovered = "";
    String error_semantico = "";
    void print(String msj){
        System.out.println(msj);
    }
:};

parser code {:
    /*public void syntax_error(Symbol cur_token){
        error_sintactico += "Error sintactico "+ cur_token.value + "\n";
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
        error_unrecovered += "Imposible recuperarse del error\n";
    }
    public void semantic(Symbol cur_token,String n) {
        error_semantico += "Error semantico en el token: " + cur_token.value + " " + n + "\n"; 
    }
    public void semantic(String msg, Object obj) {
        error_semantico += "Error semantico: " + msg + " : " + obj + "\n";
    }*/
:};

/*TERMINALES  */

terminal PUNTOCOMA,OPEN,CLOSE,EQUALS;
terminal DIFERENTE,MAYORIGUAL,MENORIGUAL,MENOSNUM,MENOSUNO;
terminal MASNUM,MASUNO,MAYOR,MENOR,LLAVEIZQ,LLAVEDER,FOR,IF,ELSE;
terminal INT,MAIN,IDENTIFICADOR,ENTERO,DECIMAL,STRING_LITERAL,BOOLEANO;
terminal EQUALS_EQUALS,WHILE,CHAR,SUMA,RESTA,DIVISION,MULTIPLICACION;
terminal STRING,DOUBLE,BOOLEAN;



/*SIMBOLOS NO TERMINALES*/ 

non terminal START, INICIO;
non terminal codigo, lineas, linea, iniciar_variables, tipo_variable, asignar, valor;
non terminal operacion_asignacion, aritmetica, operacion, inc_dec_variable, inc_dec, tipo_operacion;
non terminal cambiar_valor, conjunto_asignacion, ciclos, ciclo_if, si, no;
non terminal condicion, condicional, ciclo_for, inicio_for, ciclo_while;

start with START;

/***********inicio de la gramatica *******************
******************************************************/


START  ::=   INICIO;
INICIO ::= INT MAIN OPEN INT CLOSE OPEN codigo CLOSE ;
codigo ::= lineas | /*Empty*/;
lineas ::= lineas linea | linea;
linea ::= iniciar_variables PUNTOCOMA | cambiar_valor | ciclos;
iniciar_variables ::= tipo_variable IDENTIFICADOR | tipo_variable IDENTIFICADOR asignar;
tipo_variable ::= INT | CHAR | STRING | DOUBLE | BOOLEAN;
asignar ::= EQUALS operacion_asignacion | EQUALS valor | EQUALS IDENTIFICADOR;
valor ::= ENTERO | DECIMAL | BOOLEANO | STRING_LITERAL;
operacion_asignacion ::= aritmetica | inc_dec_variable;
aritmetica ::= operacion;
operacion ::= valor tipo_operacion valor | valor tipo_operacion IDENTIFICADOR | IDENTIFICADOR tipo_operacion valor | IDENTIFICADOR tipo_operacion IDENTIFICADOR;
tipo_operacion ::= SUMA | RESTA | DIVISION | MULTIPLICACION;
inc_dec_variable ::= IDENTIFICADOR inc_dec;
inc_dec ::= MASUNO | MENOSUNO;
cambiar_valor ::= IDENTIFICADOR EQUALS conjunto_asignacion;
conjunto_asignacion ::= valor | operacion_asignacion | IDENTIFICADOR;
ciclos ::= ciclo_if | ciclo_for | ciclo_while;
ciclo_if ::= si | si no ;
si ::= IF OPEN condicion CLOSE LLAVEIZQ codigo LLAVEDER;
condicion ::= valor condicional valor | valor condicional IDENTIFICADOR | IDENTIFICADOR condicional valor | IDENTIFICADOR condicional IDENTIFICADOR;
condicional ::= EQUALS_EQUALS | MAYOR | MENOR | MENORIGUAL | MAYORIGUAL | DIFERENTE;
no ::= ELSE LLAVEIZQ codigo LLAVEDER;
ciclo_for ::= FOR OPEN inicio_for PUNTOCOMA condicion PUNTOCOMA inc_dec_variable CLOSE LLAVEIZQ codigo LLAVEDER ;
inicio_for ::= tipo_variable IDENTIFICADOR asignar | IDENTIFICADOR asignar;
ciclo_while ::= WHILE LLAVEIZQ condicion LLAVEDER LLAVEIZQ codigo LLAVEDER;
/*********************Fin de la gramatica ********************/
